unit ufPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Buttons, Vcl.ExtCtrls;

type
  TFPrincipal = class(TForm)
    Label1: TLabel;
    edArquivo: TEdit;
    Label2: TLabel;
    edMD5: TEdit;
    btAbrir: TBitBtn;
    btVerificar: TBitBtn;
    pnStatus: TPanel;
    btFechar: TBitBtn;
    fOpen: TFileOpenDialog;
    procedure btFecharClick(Sender: TObject);
    procedure btAbrirClick(Sender: TObject);
    procedure btVerificarClick(Sender: TObject);
  private
    procedure VerificarArquivo;
  public
    { Public declarations }
  end;

var
  FPrincipal: TFPrincipal;

implementation

uses
  IdHashMessageDigest, IdHash;

{$R *.dfm}

procedure TFPrincipal.btAbrirClick(Sender: TObject);
begin
  pnStatus.Caption := EmptyStr;
  pnStatus.Color := clBtnFace;

  if fOpen.Execute then
    edArquivo.Text := fOpen.FileName;
end;

procedure TFPrincipal.btFecharClick(Sender: TObject);
begin
  Application.Terminate;
end;

procedure TFPrincipal.btVerificarClick(Sender: TObject);
begin
  if FileExists(edArquivo.Text) then
    VerificarArquivo
  else
  begin
    pnStatus.Color := clRed;
    pnStatus.Caption := 'Arquivo não encontrado...';
  end;
end;

procedure TFPrincipal.VerificarArquivo;
var
  IdMD5: TIdHashMessageDigest5;
  digest: string;
  //fStream: TFileStream;
begin
  IdMD5 := TIdHashMessageDigest5.Create;
  //fStream := TFileStream.Create(edArquivo.Text, fmOpenRead or fmShareDenyWrite);
  try
    digest := IdMD5.HashStreamAsHex(TFileStream.Create(edArquivo.Text, fmOpenRead or fmShareDenyWrite));
    if edMD5.Text <> EmptyStr then
    begin
      if digest = edMD5.Text then
      begin

      end;
    end else
    begin
      pnStatus.Color := clWhite;
      pnStatus.Caption := digest;
    end;
  finally
    FreeAndNil(IdMD5);
    //FreeAndNil(fStream);
  end;
end;

end.
